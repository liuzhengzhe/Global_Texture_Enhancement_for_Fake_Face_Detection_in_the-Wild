import sys
import numpy as np
import torch,os,random,glob
from torch import nn
from torch import optim
import torch.nn.functional as F
from torch.autograd import Variable
from torchvision import datasets, transforms#, models
from torch.utils.data import Dataset, DataLoader
import cv2
import torch.utils.model_zoo as model_zoo
import resnet18_gram as resnet
import os
#import scipy.io
from torchvision.transforms import transforms


for idx in range(115,116):
 model=torch.load('aerialmodel'+str(idx)+'.pth')
 model.eval()
 corr=0.0
 wrong=0.0

 corrs = np.zeros((2,1))
 wrongs = np.zeros((2,1))


 gt=1
 cnt=0
 paths=glob.glob('/media/lzz/LENOVO_USB_HDD1/pngdata/fang/*')
 for path in paths:
     name=path.split('/')[-1].split('.')[0]
     if int(cnt)>10000:
      continue
     cnt+=1
     im=cv2.imread(path)
     h=im.shape[0]
     ims = np.zeros((1, 3, h, h))
     ims[0, 0, :, :] = im[:, :, 0]
     ims[0, 1, :, :] = im[:, :, 1]
     ims[0, 2, :, :] = im[:, :, 2]

     image_tensor =torch.tensor(ims).float()
     inputs = Variable(image_tensor).float().cuda()
     output = model(inputs)
     output=output.detach().cpu().numpy()

     pred=np.argmax(output)
     print (gt,pred)

     if int(gt)==int(pred):
       corr+=1
       corrs[int(gt)] = corrs[int(gt)]+1
     else:
       wrong+=1
       wrongs[int(gt)] = wrongs[int(gt)] + 1

 print(corrs[0]/(corrs[0]+wrongs[0]+1))
 print(corrs[1]/(corrs[1]+wrongs[1]+1),idx)

